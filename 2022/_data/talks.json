{
  "items": [
    {
      "id": "61df3543ef0a16083d127537",
      "title": "Progressive Delivery in the Kubernetes era",
      "languages": [
        "eng",
        "es"
      ],
      "abstract": "Production is the place where all applications should live. Even though you are using continuous integration and delivery, you might wonder every time you release a new version to production if it will work or there will be some breakage on the latest version, eventually making production unavailable to the customers.  \nProgressive delivery is the next step after Continuous Delivery to test your application in production before it becomes fully available to all your user bases.\n\nEmbrace progressive delivery with techniques like the blue-green, canary release, shadowing traffic, or dark launches to validate the application in production using Kubernetes and tools like Istio, Prometheus, ArgoCD, or Argo Rollouts.\n\nCome to this session to learn progressive delivery in action using Kubernetes.",
      "type": "talk",
      "tags": [
        "kubernetes",
        "argocd",
        "argo rollouts"
      ],
      "level": "advanced",
      "speakers": [
        "5c4dc84af05c736fb61555d97670869511e52764"
      ]
    },
    {
      "id": "61e406409e44e3083e435f60",
      "title": "The hidden gems of distributed tracing",
      "languages": [
        "eng"
      ],
      "abstract": "When building distributed systems, we aim to get a macro view and zoom in when a particular component seems to be at fault for a failure. Luckily, distributed tracing captures the detailed execution of causally-related activities performed by the elements of a distributed system as it processes a given request.\nIf you wonder how different the execution of the requests from the system's expected behavior was, join my session to learn how to recognize trace patterns, determine the bottlenecks when a request is too slow, and deal with oversampling or traffic labeling in production.\n",
      "type": "talk",
      "tags": [
        "cloud",
        "distributed systems",
        "tracing",
        "practices"
      ],
      "level": "middle",
      "speakers": [
        "959143ffd6c954e5e544cdce71383429895e3679"
      ]
    },
    {
      "id": "61f1a0e0c4c4120b9d29afa0",
      "title": "Freedom Means That Kubernetes Needs To Disappear",
      "languages": [
        "eng"
      ],
      "abstract": "We are all moving towards service-based operations and self-sufficient teams. We are all trying to enable developers to be more autonomous. However, it is unrealistic to expect everyone to become an expert on everything, from infrastructure to Kubernetes and everything in between. So, we cannot shift left due to lack of expertise, but we also cannot continue being reactive to the needs of others. The only option left is to simplify services or even remove direct access to infrastructure and Kubernetes.\n\nWe might be able to accomplish those goals through Argo CD or Flux (GitOps), Crossplane (universal control plane), and KubeVela (OAM). By combining those, we can enable developers to manage everything yet still be in complete control of the aspects they care about. GitOps allows us to establish Git as the only point of interaction with the system. Crossplane Composites enable us to simplify developer experience when managing infrastructure. Finally, the Open Application Model (OAM) with KubeVela allows us to define applications instead of Kubernetes resources. If we combine those three types of tools and processes, we can enable operations to define the services used by developers to manage infrastructure and applications. We can do all that without anyone even knowing that there is Kubernetes behind all that.\n\nFor everyone to use Kubernetes, it needs to disappear.\n",
      "type": "talk",
      "tags": [
        "Cloud",
        "Kubernetes",
        "Crossplane",
        "OAM",
        "KubeVela"
      ],
      "level": "middle",
      "speakers": [
        "0ba89c51baf9f8542188bd750973e0767fbcaa68"
      ]
    },
    {
      "id": "61f1a32cc4c4120b9d29afa3",
      "title": "Live Diagramming of Knative Core Concepts",
      "languages": [
        "eng"
      ],
      "abstract": "Although Knative has been community-maintained since 2018, there has been buzz around the project lately because Google has recently submitted Knative to the CNCF for consideration as an incubating project.\n\nCool! But what is Knative, exactly?\n\nSimply put, Knative is a technology that streamlines and enhances the way that applications run on Kubernetes.\n\nThis talk is for people who are excited about this value proposition and want to dig deeper. How does it work? What components are at play? In what ways is running an app on Knative superior to running it directly on Kubernetes?\n\nInstead of presenting slides, Whitney will draw out the fundamental concepts of Knative, explaining how they work in simple, relatable terms. She will then drive deeper understanding by giving context to the main points with real-life, straightforward use cases. \n\nAttend this talk to gain a high-level understanding of Knative, its main components, and how it simplifies and improves the way that apps run on Kubernetes.",
      "type": "talk",
      "tags": [
        "Knative",
        "Kubernetes",
        "Cloud",
        "Eventing"
      ],
      "level": "beginner",
      "speakers": [
        "576aeba6a8ebcbe244cc16bd0f973593673cc530"
      ]
    },
    {
      "id": "61f1a45bc4c4120b9d29afa4",
      "title": "Dapr: Dinosaur or Developer's Dream?",
      "languages": [
        "eng"
      ],
      "abstract": "Dapr lets you abstract your distributed architecture from the underlying infrastructure that powers it. Forget about Kafka, RabbitMQ or any cloud-specific product: you're talking with a pub/sub broker. Let Dapr take care of how it works. Want to switch later? Sure, no problem!\n\nSo, is Dapr the new J2EE application server? How could it change the way we develop distributed solutions? Join me in this talk to find out if we're looking at a dinosaur in a fancy suit, or a developer's dream.",
      "type": "talk",
      "tags": [
        "distributed architecture",
        "cloud native"
      ],
      "level": "middle",
      "speakers": [
        "f33256b1512b570f58cde29c69166d0fab470334"
      ]
    },
    {
      "id": "61f1ba52c4c4120b9d29afa6",
      "title": "Java Next - From Amber to Loom, from Panama to Valhalla",
      "languages": [
        "eng"
      ],
      "abstract": "Java's four big projects are entering the home stretch: Amber and Panama have already incubated, previewed, and even finalized some features, Loom and Valhalla are on track to follow soon. Time to take a closer look at how...\n<ul>\n<li>Project Amber makes the language more expressive and ready for today's and tomorrow's problems</li>\n<li>Project Panama cuts through the isthmus separating Java from native code</li>\n<li>Project Loom enables hassle-free and efficient structured concurrency</li>\n<li>Project Valhalla mends the rift in Java's type system and improves performance</li>\n</ul>\nAfter this talk, you will know what to expect from Java in the next few years.",
      "type": "talk",
      "tags": [
        "Java",
        "Amber",
        "Panama",
        "Loom",
        "Valhalla"
      ],
      "level": "advanced",
      "speakers": [
        "78328a04b91142ff18f2a8885d6ec99391906a66"
      ]
    },
    {
      "id": "61fc3c0a4fc8140baaa031b4",
      "title": "What Java Devs Need To Know About Observability",
      "languages": [
        "eng"
      ],
      "abstract": "As applications move to containers and migrate to the cloud, they become ever more complex, and it's increasingly important to monitor, analyze, and diagnose their behaviour. Observability is a new way of thinking about monitoring and understanding your applications. It’s supported by a growing range of open source tools and standards - part of the new wave of technologies that modern developers need to go fully Cloud Native.\n\nJoin Ben Evans to get the basics of the necessary theory behind Observability, including the fundamentals of monitoring, metrics, and tracing, and then get hands-on. You'll learn how to achieve observability in Java using OpenTelemetry, the emerging Open Standard for Observability, and we'll meet several other related OSS libraries and tools  (such as Jaeger) along the way.",
      "type": "workshop",
      "tags": [
        "Cloud",
        "Java",
        "Observability",
        "OpenTelemetry"
      ],
      "level": "beginner",
      "speakers": [
        "6d4ec093aeee2a5dde4bbce8e9698776ce7bd5b8"
      ]
    },
    {
      "id": "61fc3c314fc8140baaa031b5",
      "title": "Kubernetes Native Java",
      "languages": [
        "eng"
      ],
      "abstract": "Spring is all about helping developers get to production quickly and safely. These days, \"production\" is all but guaranteed to mean Kubernetes, and Spring has you covered. Join me, Spring Developer Advocate Josh Long (@starbuxman), and we'll look at how Spring Boot makes writing blisteringly fast, cloud-native, and scalable services more effortless than ever.\n\n",
      "type": "talk",
      "tags": [
        "spring",
        "graalvm",
        "docker",
        "kubernetes",
        "buildpacks"
      ],
      "level": "middle",
      "speakers": [
        "3803f8e428feb905178afd9025cfc53fb47a8abc"
      ]
    },
    {
      "id": "61fd70f54fc8140baaa031bc",
      "title": "REACTIVE A New Hope! Learn From a Performance History",
      "languages": [
        "eng"
      ],
      "abstract": "It is a time of developers complain about performance. Rebel developers, striking from a hidden base, have won their first victory against the evil blocking applications. In this session, attendees will learn about a real-world evolution to reactive; we will be covering tips and tricks of an experience in evolving a Banking Application; Through the session, you are going to get tips, tricks, pros, cons, and the reasons for being involved on move forward to non-blocking application and present sample code and explain the security concerns on this evolution. We will be using snippets code based on JAVA, JWT, JWS, Auth0, Spring Boot, Reactor and Webflux deployed on Cloud.",
      "type": "talk",
      "tags": [
        "Java",
        "Reactive",
        "Microservice",
        "Architecture"
      ],
      "level": "middle",
      "speakers": [
        "8096d60f578c4cc2c777f231d1dff6aa46f4457b"
      ]
    },
    {
      "id": "61fd71234fc8140baaa031bd",
      "title": "Going Reactive with Helidon!",
      "languages": [
        "eng"
      ],
      "abstract": "Helidon is a brave, small but powerful opensource framework for writing microservices. And if you need get the maximum performance – making your apps reactive is the currently the best way to do it! In this session we will dive deeper and see how to create extremely performant reactive microservices with Helidon “SE” flavour. We will explore its Reactive APIs, asynchronous DB access, and reactive Web-Client. Since Helidon has its own powerful Reactive Engine, we will learn how to get the most requests served in async operations and Messaging. We will also compare the performance with Loom, since Helidon supports it out of the box! Welcome to the Danger Zone!\n\n",
      "type": "talk",
      "tags": [
        "helidon",
        "microservices",
        "reactive",
        "loom"
      ],
      "level": "middle",
      "speakers": [
        "74479a1ccc69e03d3868de48e18a4d759165d326"
      ]
    },
    {
      "id": "61fd71544fc8140baaa031be",
      "title": "Event streaming applications with Kafka Streams, Spring Kafka and Actuator (live coding)",
      "languages": [
        "eng"
      ],
      "abstract": "We often make applications in which REST (HTTP) predominates, but is this a smart choice? Can't it be faster, or rather asynchronously and event based? Especially if you work with BIG DATA, Kafka is usually the better option.You get a whole platform where scalability, fault tolerance and replay-ability are very important (you don't want your message to be lost, and preferably you want to process it again if your system has been down).\n\nThere are three libraries we will discuss during live coding:\n- Spring Kafka, where we will create a consumer and producer and test them with test-containers (without starting a whole cluster yourself).\n\n- Kafka Streams, a perfect fit for functional programming! With the StreamsAPI we will cover the best and most used patterns like branching, joining, mapping and more. We will create a Topology (stream) where we will handle fraud detection.\n\n- Spring Actuator is a match when you want to monitor your stream of events, you already got a lot of metrics for free!\n\nAfter the session you can create your own application with consumers, producers and streams!",
      "type": "talk",
      "tags": [
        "Kafka Streams",
        "Big Data",
        "Java"
      ],
      "level": "middle",
      "speakers": [
        "98d92074e12051b600499049a3773caf3fc5dd60"
      ]
    },
    {
      "id": "61fd72704fc8140baaa031bf",
      "title": "Performance Testing Java Applications",
      "languages": [
        "eng"
      ],
      "abstract": "Every so often,  you’ll read a performance benchmark (of a Java or other application), with bold claims for how well X performs compared to Y. Testing the performance of your Java application is an artform rather than engineering, and is a minefield of misconceptions, misunderstanding, and misinformation. In this session, we will review the basics and give you concrete steps to build a robust performance testbed for your application. We will be looking at this from a real-world server-side application point of view, specifically for Java apps. We’ll review common problems and how to avoid them. We’ll cover these topics while building up a performance test and running it live:\n\n\n\nDefine your goals: SLA, latency, throughput, stability\nTest env vs. Production env for testing\nThe impact of GC on Java app performance\nTools for setting up, driving load, and getting perf test results\nTesting application infrastructure like Kafka, Spark and Cassandra\nOperating system settings, JVM settings, memory sizing, and CPU sizing\nAnalyzing perf test results and finding bottlenecks that are both apparent and not obvious",
      "type": "talk",
      "tags": [
        "java",
        "performance"
      ],
      "level": "advanced",
      "speakers": [
        "5c8cf21786cae4a337b4c305fe244359243ded67"
      ]
    },
    {
      "id": "61fd73e74fc8140baaa031c0",
      "title": "Why You Can’t Buy Cloud Native",
      "languages": [
        "eng"
      ],
      "abstract": "The virtual shelves are filled to bursting with cloud native technologies; containers, runtimes, CI pipelines, observability tools. The more an organisation buys, the more cloud native it is, right? And the more network communication an app involves, the more cloud native it is, right? Well, not so much. It turns out cloud native is about how you deliver software, not the tools you use. This talk explains these often-overlooked elements for cloud native success:\n- Figuring out what problem we’re trying to solve\n- Releasing\n- Testing, but not the way you’re used to",
      "type": "talk",
      "tags": [
        "cloud",
        "culture"
      ],
      "level": "middle",
      "speakers": [
        "16b53ff6547870b3f9c9ef9f5eb97b015ba88e8b"
      ]
    },
    {
      "id": "61fd74f14fc8140baaa031c1",
      "title": "Tales from a Java Developer moving to Go in the context of Kubernetes",
      "languages": [
        "eng",
        "es"
      ],
      "abstract": "In this presentation, Mauricio, a very passionate Java Developer, share his psychedelic findings from working in the Go ecosystem for the Knative OSS Project. This presentation focuses on the Go ecosystem instead of the difference between the Java and Go languages. Tools like dependency management, IDEs, frameworks and how to deal with large projects will be discussed. While Java is still big in my heart there are good lessons, frameworks and tools that we might want to bring to the Java ecosystem from the vibrant Go community. A special emphasis is made around Kubernetes related tools and why I think that Go in Kubernetes is miles ahead of Java.",
      "type": "talk",
      "tags": [
        "Cloud",
        "java",
        "go",
        "kubernetes",
        "tools",
        "frameworks"
      ],
      "level": "middle",
      "speakers": [
        "4b26a098aafaf6bc3d533389b61d3ef5ab01f5a3"
      ]
    },
    {
      "id": "620d60d18fcdb80b9ff5371f",
      "title": "Addressing the transaction challenge in a cloud-native world",
      "languages": [
        "eng"
      ],
      "abstract": "With microservices comes great benefits but also great challenges! One such challenge is data consistency and integrity. Traditionally, tightly coupled transactions were used to ensure strong consistency and isolation. However, this results in strong coupling between services due to data locking and decreasing concurrency, both of which are unsuitable for microservices. So, how do we provide consistency guarantees for flows that span long periods of time in cloud-native applications? We'll address this challenge by investigating the Saga pattern for distributed transactions, the MicroProfile Long Running Action (LRA) specification and how these can be used to develop effective cloud-native Java microservices.",
      "type": "talk",
      "tags": [
        "Transactions",
        "Cloud-Native",
        "Java",
        "MicroProfile",
        "OSS"
      ],
      "level": "middle",
      "speakers": [
        "b21e540e924111f0e9d271ed82350fa020b9972e"
      ]
    },
    {
      "id": "620d61808fcdb80b9ff53720",
      "title": "Diagrams as code 2.0",
      "languages": [
        "eng"
      ],
      "abstract": "Diagrams as code is becoming a popular way to diagram software architecture, particularly for long-lived high-level documentation - write the diagram source in a text-based domain specific language (e.g. PlantUML or Mermaid) or a programming language, and render diagrams using web-based or command line tooling. The benefits are well understood - writing the diagram source as text allows for easy integration into software development practices and toolchains, plus the automatic layout facilities allow authors to focus on content. The problem with this approach is that it's easy for diagrams to get out of sync. Enter \"diagrams as code 2.0\" and the open source Structurizr DSL - a Java-based library providing a way to define a model of our software architecture and the views that we'd like to see, ultimately resulting in a consistent set of diagrams that are generated for us.",
      "type": "talk",
      "tags": [
        "Software Architecture",
        "Java"
      ],
      "level": "middle",
      "speakers": [
        "a51f5e99c5211c81d99cd6f4e4217940c41e2d5d"
      ]
    },
    {
      "id": "620d629d8fcdb80b9ff53721",
      "title": "The Call of Ctooling: The Secrets Behind Native Image Building",
      "languages": [
        "eng"
      ],
      "abstract": "You have learned about the “Closed World Assumption”. You live by the rule “Thou Shall Sparingly Use Reflection”. You know that “From the Powerful defineClass Comes Great Responsibility”. And yet you were still left to wonder: what is it still eluding me? What is the secret ingredient that I am still missing? Join us for a short, but deeper dive into some of the dark magic behind GraalVM’s native image builder: heap snapshotting and build-time initialization. And learn more about other obscure projects investigating the craft of static Java compilation.\n\n",
      "type": "talk",
      "tags": [
        "native image",
        "graalvm",
        "compilers",
        "leyden"
      ],
      "level": "advanced",
      "speakers": [
        "2b7ec441cce9bb5ab34f86732420a111c517420a"
      ]
    },
    {
      "id": "620d634d8fcdb80b9ff53722",
      "title": "Developer Experience with Java on Kubernetes",
      "languages": [
        "eng"
      ],
      "abstract": "In the cloud-native world, being a developer might be challenging. The number of technologies and patterns to know can be overwhelming. This session presents an approach based on open-source technologies and focused on improving the inner development loop and continuous delivery on Kubernetes. The end goal is delivering value continuously, quickly, and reliably.\n\nFirst, I’ll present several techniques for working locally in an effective and productive way. Should you run Kubernetes in your development environment? I’ll cover a few different options. Using Java and Spring Boot, we’ll build a cloud native application following the principles of test-driven development. The inner development loop will be enhanced with Cloud Native Buildpacks, Skaffold, and Telepresence.\n\nContinuous integration is a crucial practice for continuous delivery. We’ll check in code regularly, triggering an automated process to build, test, and package the application. Do you use pull requests? Relying on ArgoCD and Knative, I’ll show you how to work with temporary environments created dynamically when a new pull request is opened. Next, further acceptance tests will be carried on in a production-like environment to ensure the mainline is always in a releasable state. Finally, we’ll deploy and release the new changes to production following the GitOps principles.",
      "type": "talk",
      "tags": [
        "Java",
        "JVM",
        "Spring Boot",
        "Kubernetes",
        "Knative",
        "TDD",
        "Continuous Delivery"
      ],
      "level": "beginner",
      "speakers": [
        "311027298ebb9e1b88923214cff580786cf3d908"
      ]
    },
    {
      "id": "621909084010570ba9b6dd6c",
      "title": "Choose your own adventure with Spring Security",
      "languages": [
        "eng"
      ],
      "abstract": "Learn and apply Spring Security 5+ in a collection of individual challenges, for all levels. From picking the right dependency, to enforcing security constraints. Choose from a series of self-guided exercises around authorization to suit your needs. Topics include: OpenID Connect, Keycloak and integrating with Spring Cloud Gateway, Spring Data and Testing. Walk away with increased confidence in Spring Security and what it can do for your projects.",
      "type": "workshop",
      "tags": [
        "Spring",
        "Security"
      ],
      "level": "middle",
      "speakers": [
        "77c600183db4294a11712dd71a78a680b7008818"
      ]
    },
    {
      "id": "621909364010570ba9b6dd6d",
      "title": "Spring For Architects",
      "languages": [
        "eng"
      ],
      "abstract": "With globally distributed applications (and teams!) the job of software architect isn’t getting any easier; applications are growing increasingly complex and architects are spread thin. You can’t be involved with every decision, you must empower your teams while ensuring they are making good choices. How do you do that? How can frameworks like Spring not only make your life easier but help your teams deliver robust applications to production? Spring Cloud has a veritable plethora of sub projects from circuit breakers to functions simplifying the task of building cloud native applications while making it easy for developers to adhere to best practices. At the same time it can be overwhelming to get your head wrapped around all the features Spring offers. This talk will show how Spring allows architects to focus on the critical design decisions they need to make while ensuring developers are empowered to implement critical business use cases. Today’s cloud native applications have similar pitfalls, luckily Spring is here to help you resolve them!",
      "type": "workshop",
      "tags": [
        "spring",
        "java",
        "architecture",
        "cloud native",
        "architect"
      ],
      "level": "middle",
      "speakers": [
        "ab822b577be6a2418593327d0530f2e48da634a4",
        "8730b5530ca70d453220ebfa9278c051d0492045"
      ]
    },
    {
      "id": "621908084010570ba9b6dd6b",
      "title": "Enter Serverless Functions Journey with Quarkus",
      "languages": [
        "eng"
      ],
      "abstract": "This workshop is designed to be hands-on experiences on how developers can get started with scaffolding serverless functions projects using Quarkus, a new Kubernetes native Java framework with familiar tools (e.g. CLI, Maven, Gradel). The workshop covers deploying service functions to AWS Lambda, optimizing the functions, making them portable across multiple serverless platforms ( e.g., AWS Lambda, Azure Function, Google Cloud Platform, Kubernetes Knative), and using the latest handy command-line tool (e.g. Kn func) to enable a Buildpack for function development & deployment in minutes. Lab participants will be provided a free sandbox for serverless deployments.\n\nLab instructions(WIP): https://github.com/RedHat-Middleware-Workshops/enter-serverless-functions/blob/main/README.md",
      "type": "workshop",
      "tags": [
        "Serverless",
        "Java",
        "Kubernetes",
        "Quarkus",
        "Function"
      ],
      "level": "middle",
      "speakers": [
        "772aed76233c2cc81c2c9787426760c125fbe421"
      ]
    },
    {
      "id": "621909594010570ba9b6dd6e",
      "title": "Jakarta EE 10 Feature by Feature",
      "languages": [
        "eng"
      ],
      "abstract": "Jakarta EE 10 is here with lots of new features and improvements. This session will go through these features one by one with live coding examples of how to use them.\nYou will get a full overview of what Jakarta EE 10 brings to the table, including the brand new Jakarta EE Core Profile that targets smaller runtimes.\nIf time allows, a sneak peek into what to expect beyond Jakarta EE 10 will also be provided.\n",
      "type": "talk",
      "tags": [
        "Jakarta EE",
        "Cloud",
        "Enterprise Java"
      ],
      "level": "middle",
      "speakers": [
        "d8b71cf333c0d6c1dd9126059adf41444e95a605"
      ]
    },
    {
      "id": "621907a14010570ba9b6dd69",
      "title": "Stranger Danger: Your Java Attack Surface Just Got Bigger",
      "languages": [
        "eng"
      ],
      "abstract": "Building cloud-native Java applications is undoubtedly awesome. However, it comes with undeniable new risks. Next to your own code, you are relying on so many other things. Blindly depending on open-source libraries and Docker images can form a massive risk for your application. The wrong package can introduce severe vulnerabilities into your application, exposing your application and your user's data. Join this talk where we’ll show common threats, vulnerabilities, and misconfiguration including the recently disclosed issues in Log4j. Most importantly, you’ll learn how to protect your application with actionable remediation and best practices.",
      "type": "talk",
      "tags": [
        "Java",
        "Security",
        "Cloud-Native"
      ],
      "level": "middle",
      "speakers": [
        "a4529dc3081fc5242a51aecadc114b5ff5aa1520"
      ]
    },
    {
      "id": "62190ab64010570ba9b6dd6f",
      "title": "What the heck is DevRel?",
      "languages": [
        "eng"
      ],
      "abstract": "In recent years, we have seen new job titles appear, at the crossroads between tech, marketing and the community: Developer Advocate, Developer Evangelist, Technical Advocate… These jobs are grouped together in a large category: Developer Relations, or quite simply DevRel ... But what exactly is a DevRel? What does he/she do for a living? Is he/she just a glitter thrower? Does he/she spend his/her life in conferences? Does he/she know airports and train stations inside out? Does he/she have a unicorn costume in his/her luggage? Aurélie and Horacio will show you in this talk, with their humor and good mood, their daily life, the different types of activities and what is really behind this DevRel job… And you might even get some little anecdotes ^^",
      "type": "talk",
      "tags": [
        "DevRel",
        "Job",
        "Development"
      ],
      "level": "beginner",
      "speakers": [
        "f3a44479f0e0e748cca666a713d65df707eb5016",
        "e2f19f832dda1ec89c3019769e30a7d00f564198"
      ]
    }
  ]
}
